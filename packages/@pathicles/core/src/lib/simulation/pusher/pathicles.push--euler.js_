export  function(regl, { variables, constants }) {
  const push = (variableName, iteration) =>
    regl({
      vert: `
        //
        precision mediump float;
        attribute vec3 aPosition;

        void main () {
          gl_Position = vec4(aPosition, 1.);
        }
        `,
      frag: `
        ${constants.boundingBoxSize > 0 ? '#define BOUNDING_BOX_SIZE 1' : ''}
        precision highp float;

        uniform sampler2D ut_position;
        uniform sampler2D ut_velocity;
        uniform float tick;
        uniform float halfDeltaT;
        uniform float boundingBoxSize;
        uniform float particleCount;
        uniform float snapshotCount;

        uniform float particleInteraction;
        uniform float electricFieldStrength;
        uniform float dipole_strength;
        uniform float dipole_minZ;
        uniform float dipole_maxZ;

        uniform float quadrupole_1_strength;
        uniform float quadrupole_1_rotated;
        uniform float quadrupole_1_minZ;
        uniform float quadrupole_1_maxZ;

        uniform float quadrupole_2_strength;
        uniform float quadrupole_2_rotated;
        uniform float quadrupole_2_minZ;
        uniform float quadrupole_2_maxZ;

        float chargeMassRatio_unit_Ckg_1[4];
        float chargeMassRatioOverC_unit_Ckg_1[4];
        float charge_unit_qe[4];
        float mass_unit_eVc_2[4];

        float ptype[${constants.model.particleCount}];

        float getParticleType(float id) {
          for (int i=0; i < 2048; i++) {
              if (float(i) == id) return ptype[i];
          }
        }

        struct ParticleData {
          float mass;
          float charge;
          float chargeMassRatio;
        };

        ParticleData getParticleData(float p) {

          float particleType = getParticleType(p);

          ParticleData particleData = ParticleData(0., 0., 0.);

          if (particleType == 1.) {
            particleData.mass = mass_unit_eVc_2[1];
            particleData.charge = charge_unit_qe[1];
            particleData.chargeMassRatio = chargeMassRatio_unit_Ckg_1[1];
          }
          if (particleType == 2.) {
            particleData.mass = mass_unit_eVc_2[2];
            particleData.charge = charge_unit_qe[2];
            particleData.chargeMassRatio = chargeMassRatio_unit_Ckg_1[2];
          }
          if (particleType == 3.) {
            particleData.mass = mass_unit_eVc_2[3];
            particleData.charge = charge_unit_qe[3];
            particleData.chargeMassRatio = chargeMassRatio_unit_Ckg_1[3];
          }

          return particleData;
        }

        vec4 readVariable(ut_position, float p, float b) {
          vec2 coords = vec2(p, b) / vec2(particleCount, snapshotCount);
          return texture2D(ut_position, coords);
        }
        vec4 get_velocity(float p, float b) {
          vec2 coords = vec2(p, b) / vec2(particleCount, snapshotCount);
          return texture2D(ut_velocity, coords);
        }

        vec3 get_efield(vec3 position) {

          vec3 E = vec3( 0., 0., electricFieldStrength );
          return E;
        }

        vec3 get_bfield(vec3 position) {

          vec3 B = vec3( 0.0 );

          if (position.z > dipole_minZ && position.z < dipole_maxZ ) {
            B += vec3(0., dipole_strength, 0);
          }

          if (position.z >  quadrupole_1_minZ && position.z < quadrupole_1_maxZ ) {
            float orientation = (quadrupole_1_rotated > 0.) ? -1. : 1.;
            B += quadrupole_1_strength * vec3(position.y, position.x, 0);
          }

          if (position.z >  quadrupole_2_minZ && position.z < quadrupole_2_maxZ ) {
            float orientation = (quadrupole_2_rotated > 0.) ? -1. : 1.;
            B +=  quadrupole_2_strength * vec3( position.y, -position.x, 0);
          }
          return B;
        }

        void constants()  {
          chargeMassRatio_unit_Ckg_1[0] = 0.;
          chargeMassRatio_unit_Ckg_1[1] = -1.75882004556243e+11;
          chargeMassRatio_unit_Ckg_1[2] = 1.75882004556243e+11;
          chargeMassRatio_unit_Ckg_1[3] = 9.57883323113770929296814695637e+7;
          chargeMassRatioOverC_unit_Ckg_1[0] = 0.;
          chargeMassRatioOverC_unit_Ckg_1[1] = -5.86679217114404525813654725097e+2;
          chargeMassRatioOverC_unit_Ckg_1[2] = 5.86679217114404525813654725097e+2;
          chargeMassRatioOverC_unit_Ckg_1[3] = 3.19515483979844149381503119735e-1 ;
          charge_unit_qe[0] = 0.;
          charge_unit_qe[1] = -1.;
          charge_unit_qe[2] = 1.;
          charge_unit_qe[3] = 1.;
          mass_unit_eVc_2[0] = 0.;
          mass_unit_eVc_2[1] = 510998.94;
          mass_unit_eVc_2[2] = 510998.94;
          mass_unit_eVc_2[3] = 938272081.;

           ` + //${particleTypeArrayDefintion(constants.model.particleTypes)};
        + `
    }

  vec4
  push_position(float
  p, float
  bufferHead, float
  bufferPosition
)
  {

    vec4
    previousValue = readVariable(ut_position, p, bufferPosition)

    vec3
    previousPosition = previousValue.xyz
    float
    previousTime = previousValue.w

    vec3
    previousVelocity = get_velocity(p, bufferPosition).xyz
    vec3
    currentVelocity = get_velocity(p, bufferHead).xyz

    return vec4(
      previousPosition + halfDeltaT * previousVelocity + currentVelocity * halfDeltaT,
      previousTime + 2. * halfDeltaT)
  }


  vec4
  push_velocity(float
  p, float
  bufferHead, float
  bufferPosition
)
  {

    ParticleData
    particleData = getParticleData(p)

    vec4
    previousPosition = readVariable(ut_position, p, bufferPosition)

    vec4
    previousVelocity = get_velocity(p, bufferPosition)

    vec3
    intermediatePosition = previousPosition.xyz + previousVelocity.xyz * halfDeltaT

    vec3
    E = get_efield(intermediatePosition)
    vec3
    B = get_bfield(intermediatePosition)
    // vec3 G = vec3(0., -gravityConstant, 0.);

    vec3
    velocity = previousVelocity.xyz

    // velocity += particleData.mass * G * halfDeltaT;

    #ifdef
    BOUNDING_BOX_SIZE
    if (intermediatePosition.x < -boundingBoxSize || intermediatePosition.x > boundingBoxSize) {
      velocity.x *= -1.0
    }
    if (intermediatePosition.y < -boundingBoxSize || intermediatePosition.y > boundingBoxSize) {
      velocity.y *= -1.0
    }
    if (intermediatePosition.z < -boundingBoxSize || intermediatePosition.z > boundingBoxSize) {
      velocity.z *= -1.0
    }
    #endif

    velocity += particleData.mass * G * halfDeltaT

    return vec4(velocity, previousVelocity.w)
  }

  void main()
  {

    constants()
    float
    p, b

    p = floor(gl_FragCoord.x)
    b = floor(gl_FragCoord.y)

    float
    nextBufferPosition = floor(mod(tick, snapshotCount))
    float
    bufferPosition = (b == 0.) ? snapshotCount : b - 1.

    if (nextBufferPosition == b) {

      gl_FragColor = push_$
      {
        variableName
      }
      (p, nextBufferPosition, bufferPosition)

    } else {

      gl_FragColor = get_$
      {
        variableName
      }
      (p, b)

    }
  }
  `,
      framebuffer: () => variables[variableName][iteration % 2],
      uniforms: {
        boundingBoxSize: constants.boundingBoxSize,
        snapshotCount: constants.variables.snapshotCount,
        particleCount: constants.model.particleCount,
        tick: iteration,
        halfDeltaT: constants.deltaTOverC,

        particleInteraction: constants.particleInteraction,
        electricFieldStrength: 0,
        dipole_strength: constants.dipole_strength,
        dipole_minZ: constants.dipole_minZ,
        dipole_maxZ: constants.dipole_maxZ,
        quadrupole_1_strength: 0,
        quadrupole_1_rotated: 0,
        quadrupole_1_minZ: 0,
        quadrupole_1_maxZ: 0,
        quadrupole_2_strength: 0,
        quadrupole_2_rotated: 0,
        quadrupole_2_minZ: 0,
        quadrupole_2_maxZ: 0,
        ut_position: () => variables.position[(iteration + 1) % 2],
        ut_velocity: () =>
          variableName === 'position'
            ? variables.velocity[iteration % 2]
            : variables.velocity[(iteration + 1) % 2]
      },

      attributes: {
        aPosition: [0, -4, 0, 4, 4, 0, -4, 4, 0],
        aTex: [0, 0, 1, 0, 1, 1, 0, 1]
      },
      primitive: 'triangles',
      elements: null,
      offset: 0,
      count: 3
    })

  return () => {
    variables.iteration++
    variables.pingPong = variables.iteration % 2
    // console.log(`
    push
      `);
    push('velocity', variables.iteration)({})
    push('position', variables.iteration)({})
  }
}
